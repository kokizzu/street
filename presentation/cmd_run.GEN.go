package presentation

import (
	"os"

	"street/domain"
)


// Code generated by 1_codegen_test.go DO NOT EDIT.


func cmdRun(b *domain.Domain, action string, payload []byte) {
	switch action {
	case domain.Admin3DFilesAction:
		in := domain.Admin3DFilesIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.Admin3DFiles(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.AdminAccessLogsAction:
		in := domain.AdminAccessLogsIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.AdminAccessLogs(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.AdminDashboardAction:
		in := domain.AdminDashboardIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.AdminDashboard(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.AdminFeedbacksAction:
		in := domain.AdminFeedbacksIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.AdminFeedbacks(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.AdminFilesAction:
		in := domain.AdminFilesIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.AdminFiles(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.AdminPropHistoriesAction:
		in := domain.AdminPropHistoriesIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.AdminPropHistories(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.AdminPropertiesAction:
		in := domain.AdminPropertiesIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.AdminProperties(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.AdminPropertiesTWAction:
		in := domain.AdminPropertiesTWIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.AdminPropertiesTW(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.AdminPropertiesUSAction:
		in := domain.AdminPropertiesUSIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.AdminPropertiesUS(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.AdminRevenueAction:
		in := domain.AdminRevenueIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.AdminRevenue(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.AdminUsersAction:
		in := domain.AdminUsersIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.AdminUsers(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.GuestAutoLoginAction:
		in := domain.GuestAutoLoginIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.GuestAutoLogin(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.GuestDebugAction:
		in := domain.GuestDebugIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.GuestDebug(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.GuestExternalAuthAction:
		in := domain.GuestExternalAuthIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.GuestExternalAuth(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.GuestFilesAction:
		in := domain.GuestFilesIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.GuestFiles(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.GuestForgotPasswordAction:
		in := domain.GuestForgotPasswordIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.GuestForgotPassword(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.GuestLoginAction:
		in := domain.GuestLoginIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.GuestLogin(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.GuestOauthCallbackAction:
		in := domain.GuestOauthCallbackIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.GuestOauthCallback(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.GuestOauthCallbackRedirectAction:
		in := domain.GuestOauthCallbackRedirectIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.GuestOauthCallbackRedirect(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.GuestOauthTokenExchangeAction:
		in := domain.GuestOauthTokenExchangeIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.GuestOauthTokenExchange(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.GuestPropertyAction:
		in := domain.GuestPropertyIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.GuestProperty(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.GuestRegisterAction:
		in := domain.GuestRegisterIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.GuestRegister(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.GuestResendVerificationEmailAction:
		in := domain.GuestResendVerificationEmailIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.GuestResendVerificationEmail(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.GuestResetPasswordAction:
		in := domain.GuestResetPasswordIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.GuestResetPassword(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.GuestVerifyEmailAction:
		in := domain.GuestVerifyEmailIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.GuestVerifyEmail(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.RealtorDeletePropertyAction:
		in := domain.RealtorDeletePropertyIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.RealtorDeleteProperty(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.RealtorOwnedPropertiesAction:
		in := domain.RealtorOwnedPropertiesIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.RealtorOwnedProperties(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.RealtorPropertyAction:
		in := domain.RealtorPropertyIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.RealtorProperty(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.RealtorRevenueAction:
		in := domain.RealtorRevenueIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.RealtorRevenue(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.RealtorUpsertPropertyAction:
		in := domain.RealtorUpsertPropertyIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.RealtorUpsertProperty(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.UserAutoLoginLinkAction:
		in := domain.UserAutoLoginLinkIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.UserAutoLoginLink(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.UserBuyersAction:
		in := domain.UserBuyersIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.UserBuyers(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.UserChangePasswordAction:
		in := domain.UserChangePasswordIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.UserChangePassword(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.UserDeactivateAction:
		in := domain.UserDeactivateIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.UserDeactivate(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.UserGpsCountryAction:
		in := domain.UserGpsCountryIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.UserGpsCountry(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.UserLikePropAction:
		in := domain.UserLikePropIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.UserLikeProp(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.UserListingAction:
		in := domain.UserListingIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.UserListing(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.UserListingsAction:
		in := domain.UserListingsIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.UserListings(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.UserLogoutAction:
		in := domain.UserLogoutIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.UserLogout(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.UserNearbyFacilitiesAction:
		in := domain.UserNearbyFacilitiesIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.UserNearbyFacilities(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.UserProfileAction:
		in := domain.UserProfileIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.UserProfile(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.UserPropHistoryAction:
		in := domain.UserPropHistoryIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.UserPropHistory(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.UserPropertyAction:
		in := domain.UserPropertyIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.UserProperty(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.UserSearchPropAction:
		in := domain.UserSearchPropIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.UserSearchProp(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.UserSearchPropUSAction:
		in := domain.UserSearchPropUSIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.UserSearchPropUS(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.UserSendFeedbackAction:
		in := domain.UserSendFeedbackIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.UserSendFeedback(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.UserSessionKillAction:
		in := domain.UserSessionKillIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.UserSessionKill(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.UserSessionsActiveAction:
		in := domain.UserSessionsActiveIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.UserSessionsActive(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.UserUpdateProfileAction:
		in := domain.UserUpdateProfileIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.UserUpdateProfile(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.UserUpload3DFileAction:
		in := domain.UserUpload3DFileIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.UserUpload3DFile(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.UserUploadFileAction:
		in := domain.UserUploadFileIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.UserUploadFile(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.UserViewRoomAction:
		in := domain.UserViewRoomIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.UserViewRoom(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	}
}

// Code generated by 1_codegen_test.go DO NOT EDIT.
