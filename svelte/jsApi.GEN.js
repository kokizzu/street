
const axios = require("axios");


// rearrange response to be data first instead of axios error
function wrapErr( cb ) {
  return function( err ) {
    let data = ((err.response || {}).data || {})
    if( !data.error ) data.error = err.code
    data._axios = err
    cb( data )
  }
}

// rearrange response to be data first instead of axios error
function wrapOk( cb ) {
  return function( resp ) {
    let data = resp.data || {}
    data._axios = resp
    cb( data )
  }
}

// Code generated by 1_codegen_test.go DO NOT EDIT.
/**
 * @typedef {Object} AdminDashboardIn
 */
const AdminDashboardIn = {
}
/**
 * @typedef {Object} AdminDashboardOut
 * @property {number} registeredUserTotal
 * @property {number} registeredUserToday
 * @property {Object} requestsPerDate
 * @property {Object} uniqueUserPerDate
 * @property {Object} uniqueIpPerDate
 * @property {Object} countPerActionsPerDate
 */
const AdminDashboardOut = {
  registeredUserTotal: 0, // int64
  registeredUserToday: 0, // int64
  requestsPerDate: { // map[string]int
  }, // map[string]int
  uniqueUserPerDate: { // map[string]int
  }, // map[string]int
  uniqueIpPerDate: { // map[string]int
  }, // map[string]int
  countPerActionsPerDate: { // map[string]map[string]int
  }, // map[string]map[string]int
}
/**
 * @callback AdminDashboardCallback
 * @param {AdminDashboardOut} o
 * @returns {Promise}
 */
/**
 * @param  {AdminDashboardIn} i
 * @param {AdminDashboardCallback} cb
 * @returns {Promise}
 */
exports.AdminDashboard = async function AdminDashboard( i, cb ) {
  return await axios.post( '/admin/dashboard', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} AdminFilesIn
 * @property {String} action
 * @property {number} file.id
 * @property {number} file.createdAt
 * @property {number} file.createdBy
 * @property {String} file.mime
 * @property {String} file.purpose
 * @property {number} file.refId
 * @property {number} file.accessCount
 * @property {number} file.lastAccessAt
 * @property {String} file.originalPath
 * @property {number} file.originalSize
 * @property {String} file.resizedPath
 * @property {number} file.resizedSize
 * @property {Object} withMeta
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 */
const AdminFilesIn = {
  action: '', // string
  file: { // rqStorage.Files
    id: 0, // uint64
    createdAt: 0, // int64
    createdBy: 0, // uint64
    mime: '', // string
    purpose: '', // string
    refId: 0, // uint64
    accessCount: 0, // uint64
    lastAccessAt: 0, // int64
    originalPath: '', // string
    originalSize: 0, // uint64
    resizedPath: '', // string
    resizedSize: 0, // uint64
  }, // rqStorage.Files
  withMeta: false, // bool
  pager: { // zCrud.PagerIn
    page: 0, // int
    perPage: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerIn
}
/**
 * @typedef {Object} AdminFilesOut
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {number} pager.pages
 * @property {number} pager.total
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {Object} meta.fields
 * @property {Object} meta.mutex
 * @property {String} meta.cachedSelect
 * @property {number} file.id
 * @property {number} file.createdAt
 * @property {number} file.createdBy
 * @property {String} file.mime
 * @property {String} file.purpose
 * @property {number} file.refId
 * @property {number} file.accessCount
 * @property {number} file.lastAccessAt
 * @property {String} file.originalPath
 * @property {number} file.originalSize
 * @property {String} file.resizedPath
 * @property {number} file.resizedSize
 * @property {Object} files
 */
const AdminFilesOut = {
  pager: { // zCrud.PagerOut
    page: 0, // int
    perPage: 0, // int
    pages: 0, // int
    total: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerOut
  meta: { // zCrud.Meta
    fields: { // []Field
    }, // []Field
    mutex: { // sync.Mutex
    }, // sync.Mutex
    cachedSelect: '', // string
  }, // zCrud.Meta
  file: { // rqStorage.Files
    id: 0, // uint64
    createdAt: 0, // int64
    createdBy: 0, // uint64
    mime: '', // string
    purpose: '', // string
    refId: 0, // uint64
    accessCount: 0, // uint64
    lastAccessAt: 0, // int64
    originalPath: '', // string
    originalSize: 0, // uint64
    resizedPath: '', // string
    resizedSize: 0, // uint64
  }, // rqStorage.Files
  files: { // [][]any
  }, // [][]any
}
/**
 * @callback AdminFilesCallback
 * @param {AdminFilesOut} o
 * @returns {Promise}
 */
/**
 * @param  {AdminFilesIn} i
 * @param {AdminFilesCallback} cb
 * @returns {Promise}
 */
exports.AdminFiles = async function AdminFiles( i, cb ) {
  return await axios.post( '/admin/files', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} AdminPropHistoriesIn
 * @property {String} action
 * @property {number} propHistory.id
 * @property {String} propHistory.propertyKey
 * @property {String} propHistory.transactionKey
 * @property {String} propHistory.transactionType
 * @property {String} propHistory.transactionSign
 * @property {String} propHistory.transactionTime
 * @property {String} propHistory.transactionDateNormal
 * @property {String} propHistory.transactionNumber
 * @property {number} propHistory.priceNtd
 * @property {number} propHistory.pricePerUnit
 * @property {number} propHistory.price
 * @property {String} propHistory.address
 * @property {String} propHistory.district
 * @property {String} propHistory.note
 * @property {number} propHistory.createdAt
 * @property {number} propHistory.createdBy
 * @property {number} propHistory.updatedAt
 * @property {number} propHistory.updatedBy
 * @property {number} propHistory.deletedAt
 * @property {String} propHistory.serialNumber
 * @property {Object} withMeta
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 */
const AdminPropHistoriesIn = {
  action: '', // string
  propHistory: { // rqProperty.PropertyHistory
    id: 0, // uint64
    propertyKey: '', // string
    transactionKey: '', // string
    transactionType: '', // string
    transactionSign: '', // string
    transactionTime: '', // string
    transactionDateNormal: '', // string
    transactionNumber: '', // string
    priceNtd: 0, // int64
    pricePerUnit: 0, // int64
    price: 0, // int64
    address: '', // string
    district: '', // string
    note: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    serialNumber: '', // string
  }, // rqProperty.PropertyHistory
  withMeta: false, // bool
  pager: { // zCrud.PagerIn
    page: 0, // int
    perPage: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerIn
}
/**
 * @typedef {Object} AdminPropHistoriesOut
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {number} pager.pages
 * @property {number} pager.total
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {Object} meta.fields
 * @property {Object} meta.mutex
 * @property {String} meta.cachedSelect
 * @property {number} propHistory.id
 * @property {String} propHistory.propertyKey
 * @property {String} propHistory.transactionKey
 * @property {String} propHistory.transactionType
 * @property {String} propHistory.transactionSign
 * @property {String} propHistory.transactionTime
 * @property {String} propHistory.transactionDateNormal
 * @property {String} propHistory.transactionNumber
 * @property {number} propHistory.priceNtd
 * @property {number} propHistory.pricePerUnit
 * @property {number} propHistory.price
 * @property {String} propHistory.address
 * @property {String} propHistory.district
 * @property {String} propHistory.note
 * @property {number} propHistory.createdAt
 * @property {number} propHistory.createdBy
 * @property {number} propHistory.updatedAt
 * @property {number} propHistory.updatedBy
 * @property {number} propHistory.deletedAt
 * @property {String} propHistory.serialNumber
 * @property {Object} propHistories
 */
const AdminPropHistoriesOut = {
  pager: { // zCrud.PagerOut
    page: 0, // int
    perPage: 0, // int
    pages: 0, // int
    total: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerOut
  meta: { // zCrud.Meta
    fields: { // []Field
    }, // []Field
    mutex: { // sync.Mutex
    }, // sync.Mutex
    cachedSelect: '', // string
  }, // zCrud.Meta
  propHistory: { // rqProperty.PropertyHistory
    id: 0, // uint64
    propertyKey: '', // string
    transactionKey: '', // string
    transactionType: '', // string
    transactionSign: '', // string
    transactionTime: '', // string
    transactionDateNormal: '', // string
    transactionNumber: '', // string
    priceNtd: 0, // int64
    pricePerUnit: 0, // int64
    price: 0, // int64
    address: '', // string
    district: '', // string
    note: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    serialNumber: '', // string
  }, // rqProperty.PropertyHistory
  propHistories: { // [][]any
  }, // [][]any
}
/**
 * @callback AdminPropHistoriesCallback
 * @param {AdminPropHistoriesOut} o
 * @returns {Promise}
 */
/**
 * @param  {AdminPropHistoriesIn} i
 * @param {AdminPropHistoriesCallback} cb
 * @returns {Promise}
 */
exports.AdminPropHistories = async function AdminPropHistories( i, cb ) {
  return await axios.post( '/admin/propHistories', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} AdminPropertiesIn
 * @property {String} action
 * @property {number} property.id
 * @property {String} property.uniqPropKey
 * @property {String} property.serialNumber
 * @property {String} property.sizeM2
 * @property {String} property.mainUse
 * @property {String} property.mainBuildingMaterial
 * @property {String} property.constructCompletedDate
 * @property {String} property.numberOfFloors
 * @property {String} property.buildingLamination
 * @property {String} property.address
 * @property {String} property.district
 * @property {String} property.note
 * @property {Object} property.coord
 * @property {number} property.createdAt
 * @property {number} property.createdBy
 * @property {number} property.updatedAt
 * @property {number} property.updatedBy
 * @property {number} property.deletedAt
 * @property {String} property.formattedAddress
 * @property {String} property.lastPrice
 * @property {Object} property.priceHistoriesSell
 * @property {Object} property.priceHistoriesRent
 * @property {String} property.purpose
 * @property {String} property.houseType
 * @property {Object} property.images
 * @property {number} property.bedroom
 * @property {number} property.bathroom
 * @property {number} property.agencyFeePercent
 * @property {Object} property.floorList
 * @property {String} property.country
 * @property {Object} withMeta
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 */
const AdminPropertiesIn = {
  action: '', // string
  property: { // rqProperty.Property
    id: 0, // uint64
    uniqPropKey: '', // string
    serialNumber: '', // string
    sizeM2: '', // string
    mainUse: '', // string
    mainBuildingMaterial: '', // string
    constructCompletedDate: '', // string
    numberOfFloors: '', // string
    buildingLamination: '', // string
    address: '', // string
    district: '', // string
    note: '', // string
    coord: { // []any
    }, // []any
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    formattedAddress: '', // string
    lastPrice: '', // string
    priceHistoriesSell: { // []any
    }, // []any
    priceHistoriesRent: { // []any
    }, // []any
    purpose: '', // string
    houseType: '', // string
    images: { // []any
    }, // []any
    bedroom: 0, // int64
    bathroom: 0, // int64
    agencyFeePercent: 0, // float64
    floorList: { // []any
    }, // []any
    country: '', // string
  }, // rqProperty.Property
  withMeta: false, // bool
  pager: { // zCrud.PagerIn
    page: 0, // int
    perPage: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerIn
}
/**
 * @typedef {Object} AdminPropertiesOut
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {number} pager.pages
 * @property {number} pager.total
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {Object} meta.fields
 * @property {Object} meta.mutex
 * @property {String} meta.cachedSelect
 * @property {number} property.id
 * @property {String} property.uniqPropKey
 * @property {String} property.serialNumber
 * @property {String} property.sizeM2
 * @property {String} property.mainUse
 * @property {String} property.mainBuildingMaterial
 * @property {String} property.constructCompletedDate
 * @property {String} property.numberOfFloors
 * @property {String} property.buildingLamination
 * @property {String} property.address
 * @property {String} property.district
 * @property {String} property.note
 * @property {Object} property.coord
 * @property {number} property.createdAt
 * @property {number} property.createdBy
 * @property {number} property.updatedAt
 * @property {number} property.updatedBy
 * @property {number} property.deletedAt
 * @property {String} property.formattedAddress
 * @property {String} property.lastPrice
 * @property {Object} property.priceHistoriesSell
 * @property {Object} property.priceHistoriesRent
 * @property {String} property.purpose
 * @property {String} property.houseType
 * @property {Object} property.images
 * @property {number} property.bedroom
 * @property {number} property.bathroom
 * @property {number} property.agencyFeePercent
 * @property {Object} property.floorList
 * @property {String} property.country
 * @property {Object} properties
 */
const AdminPropertiesOut = {
  pager: { // zCrud.PagerOut
    page: 0, // int
    perPage: 0, // int
    pages: 0, // int
    total: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerOut
  meta: { // zCrud.Meta
    fields: { // []Field
    }, // []Field
    mutex: { // sync.Mutex
    }, // sync.Mutex
    cachedSelect: '', // string
  }, // zCrud.Meta
  property: { // rqProperty.Property
    id: 0, // uint64
    uniqPropKey: '', // string
    serialNumber: '', // string
    sizeM2: '', // string
    mainUse: '', // string
    mainBuildingMaterial: '', // string
    constructCompletedDate: '', // string
    numberOfFloors: '', // string
    buildingLamination: '', // string
    address: '', // string
    district: '', // string
    note: '', // string
    coord: { // []any
    }, // []any
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    formattedAddress: '', // string
    lastPrice: '', // string
    priceHistoriesSell: { // []any
    }, // []any
    priceHistoriesRent: { // []any
    }, // []any
    purpose: '', // string
    houseType: '', // string
    images: { // []any
    }, // []any
    bedroom: 0, // int64
    bathroom: 0, // int64
    agencyFeePercent: 0, // float64
    floorList: { // []any
    }, // []any
    country: '', // string
  }, // rqProperty.Property
  properties: { // [][]any
  }, // [][]any
}
/**
 * @callback AdminPropertiesCallback
 * @param {AdminPropertiesOut} o
 * @returns {Promise}
 */
/**
 * @param  {AdminPropertiesIn} i
 * @param {AdminPropertiesCallback} cb
 * @returns {Promise}
 */
exports.AdminProperties = async function AdminProperties( i, cb ) {
  return await axios.post( '/admin/properties', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} AdminUsersIn
 * @property {String} action
 * @property {number} user.id
 * @property {String} user.email
 * @property {String} user.password
 * @property {number} user.createdAt
 * @property {number} user.createdBy
 * @property {number} user.updatedAt
 * @property {number} user.updatedBy
 * @property {number} user.deletedAt
 * @property {number} user.passwordSetAt
 * @property {String} user.secretCode
 * @property {number} user.secretCodeAt
 * @property {number} user.verificationSentAt
 * @property {number} user.verifiedAt
 * @property {number} user.lastLoginAt
 * @property {String} user.fullName
 * @property {String} user.userName
 * @property {Object} withMeta
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 */
const AdminUsersIn = {
  action: '', // string
  user: { // rqAuth.Users
    id: 0, // uint64
    email: '', // string
    password: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    passwordSetAt: 0, // int64
    secretCode: '', // string
    secretCodeAt: 0, // int64
    verificationSentAt: 0, // int64
    verifiedAt: 0, // int64
    lastLoginAt: 0, // int64
    fullName: '', // string
    userName: '', // string
  }, // rqAuth.Users
  withMeta: false, // bool
  pager: { // zCrud.PagerIn
    page: 0, // int
    perPage: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerIn
}
/**
 * @typedef {Object} AdminUsersOut
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {number} pager.pages
 * @property {number} pager.total
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {Object} meta.fields
 * @property {Object} meta.mutex
 * @property {String} meta.cachedSelect
 * @property {number} user.id
 * @property {String} user.email
 * @property {String} user.password
 * @property {number} user.createdAt
 * @property {number} user.createdBy
 * @property {number} user.updatedAt
 * @property {number} user.updatedBy
 * @property {number} user.deletedAt
 * @property {number} user.passwordSetAt
 * @property {String} user.secretCode
 * @property {number} user.secretCodeAt
 * @property {number} user.verificationSentAt
 * @property {number} user.verifiedAt
 * @property {number} user.lastLoginAt
 * @property {String} user.fullName
 * @property {String} user.userName
 * @property {Object} users
 */
const AdminUsersOut = {
  pager: { // zCrud.PagerOut
    page: 0, // int
    perPage: 0, // int
    pages: 0, // int
    total: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerOut
  meta: { // zCrud.Meta
    fields: { // []Field
    }, // []Field
    mutex: { // sync.Mutex
    }, // sync.Mutex
    cachedSelect: '', // string
  }, // zCrud.Meta
  user: { // rqAuth.Users
    id: 0, // uint64
    email: '', // string
    password: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    passwordSetAt: 0, // int64
    secretCode: '', // string
    secretCodeAt: 0, // int64
    verificationSentAt: 0, // int64
    verifiedAt: 0, // int64
    lastLoginAt: 0, // int64
    fullName: '', // string
    userName: '', // string
  }, // rqAuth.Users
  users: { // [][]any
  }, // [][]any
}
/**
 * @callback AdminUsersCallback
 * @param {AdminUsersOut} o
 * @returns {Promise}
 */
/**
 * @param  {AdminUsersIn} i
 * @param {AdminUsersCallback} cb
 * @returns {Promise}
 */
exports.AdminUsers = async function AdminUsers( i, cb ) {
  return await axios.post( '/admin/users', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} GuestDebugIn
 */
const GuestDebugIn = {
}
/**
 * @typedef {Object} GuestDebugOut
 * @property {Object} request
 */
const GuestDebugOut = {
  request: { // RequestCommon
  }, // RequestCommon
}
/**
 * @callback GuestDebugCallback
 * @param {GuestDebugOut} o
 * @returns {Promise}
 */
/**
 * @param  {GuestDebugIn} i
 * @param {GuestDebugCallback} cb
 * @returns {Promise}
 */
exports.GuestDebug = async function GuestDebug( i, cb ) {
  return await axios.post( '/guest/debug', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} GuestExternalAuthIn
 * @property {String} provider
 * @property {Object} redirect
 */
const GuestExternalAuthIn = {
  provider: '', // string
  redirect: false, // bool
}
/**
 * @typedef {Object} GuestExternalAuthOut
 * @property {String} link
 * @property {String} clientID
 * @property {String} redirectUrl
 * @property {Array<String>} scopes
 * @property {String} csrfState
 */
const GuestExternalAuthOut = {
  link: '', // string
  clientID: '', // string
  redirectUrl: '', // string
  scopes: [], // []string
  csrfState: '', // string
}
/**
 * @callback GuestExternalAuthCallback
 * @param {GuestExternalAuthOut} o
 * @returns {Promise}
 */
/**
 * @param  {GuestExternalAuthIn} i
 * @param {GuestExternalAuthCallback} cb
 * @returns {Promise}
 */
exports.GuestExternalAuth = async function GuestExternalAuth( i, cb ) {
  return await axios.post( '/guest/externalAuth', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} GuestFilesIn
 * @property {String} base62Id
 * @property {String} modifier
 * @property {String} ext
 */
const GuestFilesIn = {
  base62Id: '', // string
  modifier: '', // string
  ext: '', // string
}
/**
 * @typedef {Object} GuestFilesOut
 * @property {Object} request
 * @property {Object} raw
 * @property {String} contentType
 */
const GuestFilesOut = {
  request: { // RequestCommon
  }, // RequestCommon
  raw: { // []byte
  }, // []byte
  contentType: '', // string
}
/**
 * @callback GuestFilesCallback
 * @param {GuestFilesOut} o
 * @returns {Promise}
 */
/**
 * @param  {GuestFilesIn} i
 * @param {GuestFilesCallback} cb
 * @returns {Promise}
 */
exports.GuestFiles = async function GuestFiles( i, cb ) {
  return await axios.post( '/guest/files', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} GuestForgotPasswordIn
 * @property {String} email
 */
const GuestForgotPasswordIn = {
  email: '', // string
}
/**
 * @typedef {Object} GuestForgotPasswordOut
 * @property {Object} ok
 * @property {String} resetPassUrl
 */
const GuestForgotPasswordOut = {
  ok: false, // bool
  resetPassUrl: '', // string
}
/**
 * @callback GuestForgotPasswordCallback
 * @param {GuestForgotPasswordOut} o
 * @returns {Promise}
 */
/**
 * @param  {GuestForgotPasswordIn} i
 * @param {GuestForgotPasswordCallback} cb
 * @returns {Promise}
 */
exports.GuestForgotPassword = async function GuestForgotPassword( i, cb ) {
  return await axios.post( '/guest/forgotPassword', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} GuestLoginIn
 * @property {String} email
 * @property {String} password
 */
const GuestLoginIn = {
  email: '', // string
  password: '', // string
}
/**
 * @typedef {Object} GuestLoginOut
 * @property {number} user.id
 * @property {String} user.email
 * @property {String} user.password
 * @property {number} user.createdAt
 * @property {number} user.createdBy
 * @property {number} user.updatedAt
 * @property {number} user.updatedBy
 * @property {number} user.deletedAt
 * @property {number} user.passwordSetAt
 * @property {String} user.secretCode
 * @property {number} user.secretCodeAt
 * @property {number} user.verificationSentAt
 * @property {number} user.verifiedAt
 * @property {number} user.lastLoginAt
 * @property {String} user.fullName
 * @property {String} user.userName
 * @property {Object} segments
 */
const GuestLoginOut = {
  user: { // rqAuth.Users
    id: 0, // uint64
    email: '', // string
    password: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    passwordSetAt: 0, // int64
    secretCode: '', // string
    secretCodeAt: 0, // int64
    verificationSentAt: 0, // int64
    verifiedAt: 0, // int64
    lastLoginAt: 0, // int64
    fullName: '', // string
    userName: '', // string
  }, // rqAuth.Users
  segments: { // M.SB
  }, // M.SB
}
/**
 * @callback GuestLoginCallback
 * @param {GuestLoginOut} o
 * @returns {Promise}
 */
/**
 * @param  {GuestLoginIn} i
 * @param {GuestLoginCallback} cb
 * @returns {Promise}
 */
exports.GuestLogin = async function GuestLogin( i, cb ) {
  return await axios.post( '/guest/login', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} GuestOauthCallbackIn
 * @property {String} state
 * @property {String} code
 * @property {String} accessToken
 */
const GuestOauthCallbackIn = {
  state: '', // string
  code: '', // string
  accessToken: '', // string
}
/**
 * @typedef {Object} GuestOauthCallbackOut
 * @property {Object} oauthUser
 * @property {String} email
 * @property {number} currentUser.id
 * @property {String} currentUser.email
 * @property {String} currentUser.password
 * @property {number} currentUser.createdAt
 * @property {number} currentUser.createdBy
 * @property {number} currentUser.updatedAt
 * @property {number} currentUser.updatedBy
 * @property {number} currentUser.deletedAt
 * @property {number} currentUser.passwordSetAt
 * @property {String} currentUser.secretCode
 * @property {number} currentUser.secretCodeAt
 * @property {number} currentUser.verificationSentAt
 * @property {number} currentUser.verifiedAt
 * @property {number} currentUser.lastLoginAt
 * @property {String} currentUser.fullName
 * @property {String} currentUser.userName
 * @property {String} provider
 * @property {Object} segments
 */
const GuestOauthCallbackOut = {
  oauthUser: { // M.SX
  }, // M.SX
  email: '', // string
  currentUser: { // rqAuth.Users
    id: 0, // uint64
    email: '', // string
    password: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    passwordSetAt: 0, // int64
    secretCode: '', // string
    secretCodeAt: 0, // int64
    verificationSentAt: 0, // int64
    verifiedAt: 0, // int64
    lastLoginAt: 0, // int64
    fullName: '', // string
    userName: '', // string
  }, // rqAuth.Users
  provider: '', // string
  segments: { // M.SB
  }, // M.SB
}
/**
 * @callback GuestOauthCallbackCallback
 * @param {GuestOauthCallbackOut} o
 * @returns {Promise}
 */
/**
 * @param  {GuestOauthCallbackIn} i
 * @param {GuestOauthCallbackCallback} cb
 * @returns {Promise}
 */
exports.GuestOauthCallback = async function GuestOauthCallback( i, cb ) {
  return await axios.post( '/guest/oauthCallback', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} GuestRegisterIn
 * @property {String} email
 * @property {String} password
 */
const GuestRegisterIn = {
  email: '', // string
  password: '', // string
}
/**
 * @typedef {Object} GuestRegisterOut
 * @property {number} user.id
 * @property {String} user.email
 * @property {String} user.password
 * @property {number} user.createdAt
 * @property {number} user.createdBy
 * @property {number} user.updatedAt
 * @property {number} user.updatedBy
 * @property {number} user.deletedAt
 * @property {number} user.passwordSetAt
 * @property {String} user.secretCode
 * @property {number} user.secretCodeAt
 * @property {number} user.verificationSentAt
 * @property {number} user.verifiedAt
 * @property {number} user.lastLoginAt
 * @property {String} user.fullName
 * @property {String} user.userName
 * @property {String} verifyEmailUrl
 */
const GuestRegisterOut = {
  user: { // rqAuth.Users
    id: 0, // uint64
    email: '', // string
    password: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    passwordSetAt: 0, // int64
    secretCode: '', // string
    secretCodeAt: 0, // int64
    verificationSentAt: 0, // int64
    verifiedAt: 0, // int64
    lastLoginAt: 0, // int64
    fullName: '', // string
    userName: '', // string
  }, // rqAuth.Users
  verifyEmailUrl: '', // string
}
/**
 * @callback GuestRegisterCallback
 * @param {GuestRegisterOut} o
 * @returns {Promise}
 */
/**
 * @param  {GuestRegisterIn} i
 * @param {GuestRegisterCallback} cb
 * @returns {Promise}
 */
exports.GuestRegister = async function GuestRegister( i, cb ) {
  return await axios.post( '/guest/register', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} GuestResendVerificationEmailIn
 * @property {String} email
 */
const GuestResendVerificationEmailIn = {
  email: '', // string
}
/**
 * @typedef {Object} GuestResendVerificationEmailOut
 * @property {Object} ok
 * @property {String} verifyEmailUrl
 */
const GuestResendVerificationEmailOut = {
  ok: false, // bool
  verifyEmailUrl: '', // string
}
/**
 * @callback GuestResendVerificationEmailCallback
 * @param {GuestResendVerificationEmailOut} o
 * @returns {Promise}
 */
/**
 * @param  {GuestResendVerificationEmailIn} i
 * @param {GuestResendVerificationEmailCallback} cb
 * @returns {Promise}
 */
exports.GuestResendVerificationEmail = async function GuestResendVerificationEmail( i, cb ) {
  return await axios.post( '/guest/resendVerificationEmail', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} GuestResetPasswordIn
 * @property {String} secretCode
 * @property {String} hash
 * @property {String} password
 */
const GuestResetPasswordIn = {
  secretCode: '', // string
  hash: '', // string
  password: '', // string
}
/**
 * @typedef {Object} GuestResetPasswordOut
 * @property {Object} ok
 */
const GuestResetPasswordOut = {
  ok: false, // bool
}
/**
 * @callback GuestResetPasswordCallback
 * @param {GuestResetPasswordOut} o
 * @returns {Promise}
 */
/**
 * @param  {GuestResetPasswordIn} i
 * @param {GuestResetPasswordCallback} cb
 * @returns {Promise}
 */
exports.GuestResetPassword = async function GuestResetPassword( i, cb ) {
  return await axios.post( '/guest/resetPassword', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} GuestVerifyEmailIn
 * @property {String} secretCode
 * @property {String} hash
 */
const GuestVerifyEmailIn = {
  secretCode: '', // string
  hash: '', // string
}
/**
 * @typedef {Object} GuestVerifyEmailOut
 * @property {Object} ok
 * @property {String} email
 */
const GuestVerifyEmailOut = {
  ok: false, // bool
  email: '', // string
}
/**
 * @callback GuestVerifyEmailCallback
 * @param {GuestVerifyEmailOut} o
 * @returns {Promise}
 */
/**
 * @param  {GuestVerifyEmailIn} i
 * @param {GuestVerifyEmailCallback} cb
 * @returns {Promise}
 */
exports.GuestVerifyEmail = async function GuestVerifyEmail( i, cb ) {
  return await axios.post( '/guest/verifyEmail', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} RealtorOwnedPropertiesIn
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {Object} showMeta
 */
const RealtorOwnedPropertiesIn = {
  pager: { // zCrud.PagerIn
    page: 0, // int
    perPage: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerIn
  showMeta: false, // bool
}
/**
 * @typedef {Object} RealtorOwnedPropertiesOut
 * @property {Object} properties
 * @property {Object} meta
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {number} pager.pages
 * @property {number} pager.total
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 */
const RealtorOwnedPropertiesOut = {
  properties: { // []rqProperty.Property
  }, // []rqProperty.Property
  meta: { // []zCrud.Field
  }, // []zCrud.Field
  pager: { // zCrud.PagerOut
    page: 0, // int
    perPage: 0, // int
    pages: 0, // int
    total: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerOut
}
/**
 * @callback RealtorOwnedPropertiesCallback
 * @param {RealtorOwnedPropertiesOut} o
 * @returns {Promise}
 */
/**
 * @param  {RealtorOwnedPropertiesIn} i
 * @param {RealtorOwnedPropertiesCallback} cb
 * @returns {Promise}
 */
exports.RealtorOwnedProperties = async function RealtorOwnedProperties( i, cb ) {
  return await axios.post( '/realtor/ownedProperties', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} RealtorPropertyIn
 * @property {number} id
 */
const RealtorPropertyIn = {
  id: 0, // uint64
}
/**
 * @typedef {Object} RealtorPropertyOut
 * @property {number} property.id
 * @property {String} property.uniqPropKey
 * @property {String} property.serialNumber
 * @property {String} property.sizeM2
 * @property {String} property.mainUse
 * @property {String} property.mainBuildingMaterial
 * @property {String} property.constructCompletedDate
 * @property {String} property.numberOfFloors
 * @property {String} property.buildingLamination
 * @property {String} property.address
 * @property {String} property.district
 * @property {String} property.note
 * @property {Object} property.coord
 * @property {number} property.createdAt
 * @property {number} property.createdBy
 * @property {number} property.updatedAt
 * @property {number} property.updatedBy
 * @property {number} property.deletedAt
 * @property {String} property.formattedAddress
 * @property {String} property.lastPrice
 * @property {Object} property.priceHistoriesSell
 * @property {Object} property.priceHistoriesRent
 * @property {String} property.purpose
 * @property {String} property.houseType
 * @property {Object} property.images
 * @property {number} property.bedroom
 * @property {number} property.bathroom
 * @property {number} property.agencyFeePercent
 * @property {Object} property.floorList
 * @property {String} property.country
 */
const RealtorPropertyOut = {
  property: { // rqProperty.Property
    id: 0, // uint64
    uniqPropKey: '', // string
    serialNumber: '', // string
    sizeM2: '', // string
    mainUse: '', // string
    mainBuildingMaterial: '', // string
    constructCompletedDate: '', // string
    numberOfFloors: '', // string
    buildingLamination: '', // string
    address: '', // string
    district: '', // string
    note: '', // string
    coord: { // []any
    }, // []any
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    formattedAddress: '', // string
    lastPrice: '', // string
    priceHistoriesSell: { // []any
    }, // []any
    priceHistoriesRent: { // []any
    }, // []any
    purpose: '', // string
    houseType: '', // string
    images: { // []any
    }, // []any
    bedroom: 0, // int64
    bathroom: 0, // int64
    agencyFeePercent: 0, // float64
    floorList: { // []any
    }, // []any
    country: '', // string
  }, // rqProperty.Property
}
/**
 * @callback RealtorPropertyCallback
 * @param {RealtorPropertyOut} o
 * @returns {Promise}
 */
/**
 * @param  {RealtorPropertyIn} i
 * @param {RealtorPropertyCallback} cb
 * @returns {Promise}
 */
exports.RealtorProperty = async function RealtorProperty( i, cb ) {
  return await axios.post( '/realtor/property', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} RealtorUpsertPropertyIn
 * @property {number} property.id
 * @property {String} property.uniqPropKey
 * @property {String} property.serialNumber
 * @property {String} property.sizeM2
 * @property {String} property.mainUse
 * @property {String} property.mainBuildingMaterial
 * @property {String} property.constructCompletedDate
 * @property {String} property.numberOfFloors
 * @property {String} property.buildingLamination
 * @property {String} property.address
 * @property {String} property.district
 * @property {String} property.note
 * @property {Object} property.coord
 * @property {number} property.createdAt
 * @property {number} property.createdBy
 * @property {number} property.updatedAt
 * @property {number} property.updatedBy
 * @property {number} property.deletedAt
 * @property {String} property.formattedAddress
 * @property {String} property.lastPrice
 * @property {Object} property.priceHistoriesSell
 * @property {Object} property.priceHistoriesRent
 * @property {String} property.purpose
 * @property {String} property.houseType
 * @property {Object} property.images
 * @property {number} property.bedroom
 * @property {number} property.bathroom
 * @property {number} property.agencyFeePercent
 * @property {Object} property.floorList
 * @property {String} property.country
 */
const RealtorUpsertPropertyIn = {
  property: { // rqProperty.Property
    id: 0, // uint64
    uniqPropKey: '', // string
    serialNumber: '', // string
    sizeM2: '', // string
    mainUse: '', // string
    mainBuildingMaterial: '', // string
    constructCompletedDate: '', // string
    numberOfFloors: '', // string
    buildingLamination: '', // string
    address: '', // string
    district: '', // string
    note: '', // string
    coord: { // []any
    }, // []any
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    formattedAddress: '', // string
    lastPrice: '', // string
    priceHistoriesSell: { // []any
    }, // []any
    priceHistoriesRent: { // []any
    }, // []any
    purpose: '', // string
    houseType: '', // string
    images: { // []any
    }, // []any
    bedroom: 0, // int64
    bathroom: 0, // int64
    agencyFeePercent: 0, // float64
    floorList: { // []any
    }, // []any
    country: '', // string
  }, // rqProperty.Property
}
/**
 * @typedef {Object} RealtorUpsertPropertyOut
 * @property {number} property.id
 * @property {String} property.uniqPropKey
 * @property {String} property.serialNumber
 * @property {String} property.sizeM2
 * @property {String} property.mainUse
 * @property {String} property.mainBuildingMaterial
 * @property {String} property.constructCompletedDate
 * @property {String} property.numberOfFloors
 * @property {String} property.buildingLamination
 * @property {String} property.address
 * @property {String} property.district
 * @property {String} property.note
 * @property {Object} property.coord
 * @property {number} property.createdAt
 * @property {number} property.createdBy
 * @property {number} property.updatedAt
 * @property {number} property.updatedBy
 * @property {number} property.deletedAt
 * @property {String} property.formattedAddress
 * @property {String} property.lastPrice
 * @property {Object} property.priceHistoriesSell
 * @property {Object} property.priceHistoriesRent
 * @property {String} property.purpose
 * @property {String} property.houseType
 * @property {Object} property.images
 * @property {number} property.bedroom
 * @property {number} property.bathroom
 * @property {number} property.agencyFeePercent
 * @property {Object} property.floorList
 * @property {String} property.country
 */
const RealtorUpsertPropertyOut = {
  property: { // rqProperty.Property
    id: 0, // uint64
    uniqPropKey: '', // string
    serialNumber: '', // string
    sizeM2: '', // string
    mainUse: '', // string
    mainBuildingMaterial: '', // string
    constructCompletedDate: '', // string
    numberOfFloors: '', // string
    buildingLamination: '', // string
    address: '', // string
    district: '', // string
    note: '', // string
    coord: { // []any
    }, // []any
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    formattedAddress: '', // string
    lastPrice: '', // string
    priceHistoriesSell: { // []any
    }, // []any
    priceHistoriesRent: { // []any
    }, // []any
    purpose: '', // string
    houseType: '', // string
    images: { // []any
    }, // []any
    bedroom: 0, // int64
    bathroom: 0, // int64
    agencyFeePercent: 0, // float64
    floorList: { // []any
    }, // []any
    country: '', // string
  }, // rqProperty.Property
}
/**
 * @callback RealtorUpsertPropertyCallback
 * @param {RealtorUpsertPropertyOut} o
 * @returns {Promise}
 */
/**
 * @param  {RealtorUpsertPropertyIn} i
 * @param {RealtorUpsertPropertyCallback} cb
 * @returns {Promise}
 */
exports.RealtorUpsertProperty = async function RealtorUpsertProperty( i, cb ) {
  return await axios.post( '/realtor/upsertProperty', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} UserChangePasswordIn
 * @property {String} oldPass
 * @property {String} newPass
 */
const UserChangePasswordIn = {
  oldPass: '', // string
  newPass: '', // string
}
/**
 * @typedef {Object} UserChangePasswordOut
 * @property {Object} ok
 */
const UserChangePasswordOut = {
  ok: false, // bool
}
/**
 * @callback UserChangePasswordCallback
 * @param {UserChangePasswordOut} o
 * @returns {Promise}
 */
/**
 * @param  {UserChangePasswordIn} i
 * @param {UserChangePasswordCallback} cb
 * @returns {Promise}
 */
exports.UserChangePassword = async function UserChangePassword( i, cb ) {
  return await axios.post( '/user/changePassword', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} UserDeactivateIn
 * @property {String} password
 */
const UserDeactivateIn = {
  password: '', // string
}
/**
 * @typedef {Object} UserDeactivateOut
 */
const UserDeactivateOut = {
}
/**
 * @callback UserDeactivateCallback
 * @param {UserDeactivateOut} o
 * @returns {Promise}
 */
/**
 * @param  {UserDeactivateIn} i
 * @param {UserDeactivateCallback} cb
 * @returns {Promise}
 */
exports.UserDeactivate = async function UserDeactivate( i, cb ) {
  return await axios.post( '/user/deactivate', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} UserLikePropIn
 * @property {number} propId
 * @property {Object} like
 */
const UserLikePropIn = {
  propId: 0, // uint64
  like: false, // bool
}
/**
 * @typedef {Object} UserLikePropOut
 */
const UserLikePropOut = {
}
/**
 * @callback UserLikePropCallback
 * @param {UserLikePropOut} o
 * @returns {Promise}
 */
/**
 * @param  {UserLikePropIn} i
 * @param {UserLikePropCallback} cb
 * @returns {Promise}
 */
exports.UserLikeProp = async function UserLikeProp( i, cb ) {
  return await axios.post( '/userLikeProp', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} UserLogoutIn
 */
const UserLogoutIn = {
}
/**
 * @typedef {Object} UserLogoutOut
 * @property {number} logoutAt
 */
const UserLogoutOut = {
  logoutAt: 0, // int64
}
/**
 * @callback UserLogoutCallback
 * @param {UserLogoutOut} o
 * @returns {Promise}
 */
/**
 * @param  {UserLogoutIn} i
 * @param {UserLogoutCallback} cb
 * @returns {Promise}
 */
exports.UserLogout = async function UserLogout( i, cb ) {
  return await axios.post( '/user/logout', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} UserNearbyFacilitiesIn
 * @property {number} centerLat
 * @property {number} centerLong
 */
const UserNearbyFacilitiesIn = {
  centerLat: 0, // float64
  centerLong: 0, // float64
}
/**
 * @typedef {Object} UserNearbyFacilitiesOut
 * @property {Object} facilities
 */
const UserNearbyFacilitiesOut = {
  facilities: { // []xGmap.Place
  }, // []xGmap.Place
}
/**
 * @callback UserNearbyFacilitiesCallback
 * @param {UserNearbyFacilitiesOut} o
 * @returns {Promise}
 */
/**
 * @param  {UserNearbyFacilitiesIn} i
 * @param {UserNearbyFacilitiesCallback} cb
 * @returns {Promise}
 */
exports.UserNearbyFacilities = async function UserNearbyFacilities( i, cb ) {
  return await axios.post( '/user/nearbyFacilitites', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} UserProfileIn
 */
const UserProfileIn = {
}
/**
 * @typedef {Object} UserProfileOut
 * @property {number} user.id
 * @property {String} user.email
 * @property {String} user.password
 * @property {number} user.createdAt
 * @property {number} user.createdBy
 * @property {number} user.updatedAt
 * @property {number} user.updatedBy
 * @property {number} user.deletedAt
 * @property {number} user.passwordSetAt
 * @property {String} user.secretCode
 * @property {number} user.secretCodeAt
 * @property {number} user.verificationSentAt
 * @property {number} user.verifiedAt
 * @property {number} user.lastLoginAt
 * @property {String} user.fullName
 * @property {String} user.userName
 * @property {Object} segments
 */
const UserProfileOut = {
  user: { // rqAuth.Users
    id: 0, // uint64
    email: '', // string
    password: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    passwordSetAt: 0, // int64
    secretCode: '', // string
    secretCodeAt: 0, // int64
    verificationSentAt: 0, // int64
    verifiedAt: 0, // int64
    lastLoginAt: 0, // int64
    fullName: '', // string
    userName: '', // string
  }, // rqAuth.Users
  segments: { // M.SB
  }, // M.SB
}
/**
 * @callback UserProfileCallback
 * @param {UserProfileOut} o
 * @returns {Promise}
 */
/**
 * @param  {UserProfileIn} i
 * @param {UserProfileCallback} cb
 * @returns {Promise}
 */
exports.UserProfile = async function UserProfile( i, cb ) {
  return await axios.post( '/user/profile', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} UserPropHistoryIn
 * @property {String} propertyKey
 */
const UserPropHistoryIn = {
  propertyKey: '', // string
}
/**
 * @typedef {Object} UserPropHistoryOut
 * @property {Object} history
 */
const UserPropHistoryOut = {
  history: { // []rqProperty.PropertyHistory
  }, // []rqProperty.PropertyHistory
}
/**
 * @callback UserPropHistoryCallback
 * @param {UserPropHistoryOut} o
 * @returns {Promise}
 */
/**
 * @param  {UserPropHistoryIn} i
 * @param {UserPropHistoryCallback} cb
 * @returns {Promise}
 */
exports.UserPropHistory = async function UserPropHistory( i, cb ) {
  return await axios.post( '/user/propHistory', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} UserSearchPropIn
 * @property {number} centerLat
 * @property {number} centerLong
 * @property {number} offset
 * @property {number} limit
 * @property {number} maxDistanceKM
 */
const UserSearchPropIn = {
  centerLat: 0, // float64
  centerLong: 0, // float64
  offset: 0, // int
  limit: 0, // int
  maxDistanceKM: 0, // float64
}
/**
 * @typedef {Object} UserSearchPropOut
 * @property {Object} properties
 */
const UserSearchPropOut = {
  properties: { // []Property
  }, // []Property
}
/**
 * @callback UserSearchPropCallback
 * @param {UserSearchPropOut} o
 * @returns {Promise}
 */
/**
 * @param  {UserSearchPropIn} i
 * @param {UserSearchPropCallback} cb
 * @returns {Promise}
 */
exports.UserSearchProp = async function UserSearchProp( i, cb ) {
  return await axios.post( '/user/searchProp', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} UserUpdateProfileIn
 * @property {String} userName
 * @property {String} fullName
 * @property {String} email
 */
const UserUpdateProfileIn = {
  userName: '', // string
  fullName: '', // string
  email: '', // string
}
/**
 * @typedef {Object} UserUpdateProfileOut
 * @property {number} user.id
 * @property {String} user.email
 * @property {String} user.password
 * @property {number} user.createdAt
 * @property {number} user.createdBy
 * @property {number} user.updatedAt
 * @property {number} user.updatedBy
 * @property {number} user.deletedAt
 * @property {number} user.passwordSetAt
 * @property {String} user.secretCode
 * @property {number} user.secretCodeAt
 * @property {number} user.verificationSentAt
 * @property {number} user.verifiedAt
 * @property {number} user.lastLoginAt
 * @property {String} user.fullName
 * @property {String} user.userName
 * @property {Object} segments
 */
const UserUpdateProfileOut = {
  user: { // rqAuth.Users
    id: 0, // uint64
    email: '', // string
    password: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    passwordSetAt: 0, // int64
    secretCode: '', // string
    secretCodeAt: 0, // int64
    verificationSentAt: 0, // int64
    verifiedAt: 0, // int64
    lastLoginAt: 0, // int64
    fullName: '', // string
    userName: '', // string
  }, // rqAuth.Users
  segments: { // M.SB
  }, // M.SB
}
/**
 * @callback UserUpdateProfileCallback
 * @param {UserProfileOut} o
 * @returns {Promise}
 */
/**
 * @param  {UserUpdateProfileIn} i
 * @param {UserUpdateProfileCallback} cb
 * @returns {Promise}
 */
exports.UserUpdateProfile = async function UserUpdateProfile( i, cb ) {
  return await axios.post( '/user/updateProfile', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} UserUploadFileIn
 * @property {String} purpose
 */
const UserUploadFileIn = {
  purpose: '', // string
}
/**
 * @typedef {Object} UserUploadFileOut
 * @property {String} resizedUrl
 * @property {String} originalUrl
 * @property {String} urlPattern
 */
const UserUploadFileOut = {
  resizedUrl: '', // string
  originalUrl: '', // string
  urlPattern: '', // string
}
/**
 * @callback UserUploadFileCallback
 * @param {UserUploadFileOut} o
 * @returns {Promise}
 */
/**
 * @param  {UserUploadFileIn} i
 * @param {UserUploadFileCallback} cb
 * @returns {Promise}
 */
exports.UserUploadFile = async function UserUploadFile( i, cb ) {
  return await axios.post( '/user/uploadFile', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}


// Code generated by 1_codegen_test.go DO NOT EDIT.
